// datasource and generator blocks should be at the top of your file
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------- ENUMS ---------------------------

// ----- System & Admin Enums -----
enum UserStatus {
  active
  inactive
  suspended
}

enum Gender {
  male
  female
  other
}

enum NoDueStatus {
  pending
  cleared
  due_found
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum InvoiceStatus {
  paid
  unpaid
  overdue
  cancelled
}

enum RequestWorkflowStatus {
  submitted
  with_advisor
  with_hod
  with_principal
  completed
  rejected
}

enum PaymentStatus {
  successful
  failed
  pending
}

enum NotificationStatus {
  read
  unread
}

// ----- Student-Specific Enums -----
enum Program {
  btech
  mca
}

// enum Category {
//   general
//   obc
//   sc
//   st
//   ews
//   sebc
//   oec
//   other
// }

enum AdmissionQuota {
  merit
  management
  government
  other
}

enum AdmissionStatus {
  pending
  approved
  rejected
  waitlisted
}

enum AdmissionType {
  nri
  regular
  lateral
  management
}

// --------------------------- MODELS ---------------------------

// Model for Admins, HODs, Staff, etc.
model User {
  id           Int        @id @default(autoincrement()) @map("user_id")
  username     String     @unique
  passwordHash String     @map("password_hash")
  email        String     @unique
  status       UserStatus @default(active)
  lastLogin    DateTime?  @map("last_login")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // --- Relations ---
  student               Student[] // A User (like an advisor) can be linked to many students
  approvals             NoDueApproval[]
  userRoles             UserRole[]
  hodDetails            HodDetails?
  advisorDetails        AdvisorDetails?
  principalDetails      PrincipalDetails?
  sentNotifications     Notification[]    @relation("SentNotifications")
  receivedNotifications Notification[]    @relation("ReceivedNotifications")
  auditLogs             AuditLog[]

  @@map("users")
}

// ----- STUDENT MODEL: Decoupled from User -----
model Student {
  id        Int      @id @default(autoincrement()) @map("student_id")
  advisorId Int?     @map("advisor_id") // Optional link to an advisor (User)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // --- Detailed Personal Info ---
  name         String
  password     String // For potential student-specific login
  dateOfBirth  DateTime? @map("date_of_birth")
  email        String?  @unique
  gender       Gender
  religion     String
  nationality  String   @default("Indian")
  motherTongue String   @map("mother_tongue")
  bloodGroup   String?  @map("blood_group")

  // --- Contact Info ---
  studentPhoneNumber String @unique @map("student_phone_number")
  permanentAddress   String @map("permanent_address")
  contactAddress     String @map("contact_address")
  stateOfResidence   String @map("state_of_residence")
  aadhaarNumber      String @unique @map("aadhaar_number")

  // --- Family Info ---
  fatherName         String?
  fatherPhoneNumber  String?  @map("father_phone_number")
  motherName         String?
  motherPhoneNumber  String?  @map("mother_phone_number")
  parentEmail        String?  @map("parent_email")
  annualFamilyIncome Decimal? @map("annual_family_income")

  // --- Guardian Info (Optional) ---
  guardianName             String? @map("guardian_name")
  guardianRelationship     String? @map("guardian_relationship")
  guardianEmail            String? @map("guardian_email")
  localGuardianAddress     String? @map("local_guardian_address")
  localGuardianPhoneNumber String? @map("local_guardian_phone_number")

  // --- Admission Info ---
  program                 Program
  departmentId            Int             @map("department_id")
  status                  AdmissionStatus @default(pending)
  admissionNumber         String?         @unique @map("admission_number")
  admissionDate           DateTime?       @map("admission_date")
  admissionType           AdmissionType   @default(regular) @map("admission_type")
  admissionQuota          AdmissionQuota?  @map("admission_quota")
  admittedCategory        String?         @map("admitted_category")
  category                String?
  allottedBranch          String          @map("allotted_branch")
  isFeeConcessionEligible Boolean         @default(false) @map("is_fee_concession_eligible")

  // --- Academic Info (Previous) ---
  lastInstitution          String    @map("last_institution")
  tcNumber                 String?   @map("tc_number")
  tcDate                   DateTime? @map("tc_date")
  qualifyingExamName       String    @map("qualifying_exam_name")
  qualifyingExamRegisterNo String    @map("qualifying_exam_register_no")
  percentage               Float?

  // --- MCA Specific Marks (Optional) ---
  previousDegreeCgpaOrTotalMarks Float? @map("previous_degree_cgpa_or_total_marks")

  // --- B.Tech Specific Marks (Optional) ---
  physicsScore     Float? @map("physics_score")
  chemistryScore   Float? @map("chemistry_score")
  mathsScore       Float? @map("maths_score")
  keamSubjectTotal Float? @map("keam_subject_total")

  // --- Entrance Exam Info (Common) ---
  entranceType       String? @map("entrance_type")
  entranceRollNo     String? @map("entrance_roll_no")
  entranceRank       Int?    @map("entrance_rank")
  entranceTotalScore Float?  @map("entrance_total_score")

  // --- Bank Info ---
  accountNumber String? @map("account_number")
  bankName      String? @map("bank_name")
  ifscCode      String? @map("ifsc_code")
  bankBranch    String? @map("bank_branch")

  // --- Relations ---
  advisor    User?          @relation(fields: [advisorId], references: [id])
  department Department     @relation(fields: [departmentId], references: [id])
  requests   NoDueRequest[]
  invoices   Invoice[]
  feeDetails FeeDetails[]

  @@map("students")
}

// ----- Other System Models -----

model Role {
  id          Int              @id @default(autoincrement()) @map("role_id")
  name        String           @unique @map("role_name")
  description String?
  userRoles   UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement()) @map("permission_id")
  name        String           @unique @map("permission_name")
  description String?
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId Int  @map("user_id")
  roleId Int  @map("role_id")
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Department {
  id         Int         @id @default(autoincrement()) @map("department_id")
  name       String      @unique @map("department_name")
  hodId      Int?        @unique @map("hod_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  students   Student[]
  noDues     NoDue[]
  hodDetails HodDetails?

  @@map("departments")
}

model HodDetails {
  id           Int        @id @default(autoincrement()) @map("hod_id")
  userId       Int        @unique @map("user_id")
  departmentId Int        @unique @map("department_id")
  user         User       @relation(fields: [userId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("hod_details")
}

model AdvisorDetails {
  id     Int  @id @default(autoincrement()) @map("advisor_id")
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("advisor_details")
}

model PrincipalDetails {
  id     Int  @id @default(autoincrement()) @map("principal_id")
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("principal_details")
}

model NoDueRequest {
  id             Int                   @id @default(autoincrement()) @map("request_id")
  studentId      Int                   @map("student_id")
  reason         String
  requestDate    DateTime              @default(now()) @map("request_date")
  status         RequestStatus         @default(pending)
  workflowStatus RequestWorkflowStatus @default(submitted) @map("workflow_status")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  student        Student               @relation(fields: [studentId], references: [id])
  noDues         NoDue[]

  @@map("no_due_requests")
}

model NoDue {
  id           Int             @id @default(autoincrement()) @map("no_due_id")
  requestId    Int             @map("request_id")
  departmentId Int             @map("department_id")
  status       NoDueStatus     @default(pending)
  comments     String?
  updatedAt    DateTime        @updatedAt @map("updated_at")
  request      NoDueRequest    @relation(fields: [requestId], references: [id])
  department   Department      @relation(fields: [departmentId], references: [id])
  approvals    NoDueApproval[]

  @@map("no_dues")
}

model NoDueApproval {
  id           Int            @id @default(autoincrement()) @map("approval_id")
  noDueId      Int            @map("no_due_id")
  approverId   Int            @map("approver_id")
  approvalDate DateTime       @default(now()) @map("approval_date")
  status       ApprovalStatus @default(pending)
  comments     String?
  noDue        NoDue          @relation(fields: [noDueId], references: [id])
  approver     User           @relation(fields: [approverId], references: [id])

  @@map("no_due_approvals")
}

model FeeDetails {
  id        Int       @id @default(autoincrement()) @map("fee_id")
  studentId Int       @map("student_id")
  feeType   String    @map("fee_type")
  amount    Decimal
  dueDate   DateTime  @map("due_date") @db.Date
  createdAt DateTime  @default(now()) @map("created_at")
  student   Student   @relation(fields: [studentId], references: [id])
  invoices  Invoice[]

  @@map("fee_details")
}

model Invoice {
  id        Int           @id @default(autoincrement()) @map("invoice_id")
  studentId Int           @map("student_id")
  feeId     Int           @map("fee_id")
  amount    Decimal
  issueDate DateTime      @default(now()) @map("issue_date") @db.Date
  dueDate   DateTime      @map("due_date") @db.Date
  status    InvoiceStatus @default(unpaid)
  createdAt DateTime      @default(now()) @map("created_at")
  student   Student       @relation(fields: [studentId], references: [id])
  fee       FeeDetails    @relation(fields: [feeId], references: [id])
  payments  Payment[]

  @@map("invoices")
}

model Payment {
  id            Int           @id @default(autoincrement()) @map("payment_id")
  invoiceId     Int           @map("invoice_id")
  amount        Decimal
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentMethod String        @map("payment_method")
  transactionId String        @unique @map("transaction_id")
  status        PaymentStatus @default(pending)
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Notification {
  id         Int                @id @default(autoincrement()) @map("notification_id")
  senderId   Int                @map("sender_id")
  receiverId Int                @map("receiver_id")
  message    String
  status     NotificationStatus @default(unread)
  createdAt  DateTime           @default(now()) @map("created_at")
  sender     User               @relation("SentNotifications", fields: [senderId], references: [id])
  receiver   User               @relation("ReceivedNotifications", fields: [receiverId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id        Int      @id @default(autoincrement()) @map("log_id")
  userId    Int      @map("user_id")
  action    String
  details   Json?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model Setting {
  id    Int    @id @default(autoincrement()) @map("setting_id")
  key   String @unique
  value String

  @@map("settings")
}
