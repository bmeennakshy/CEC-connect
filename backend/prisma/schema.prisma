generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 2. Define Enums
enum UserStatus {
  active
  inactive
  suspended
}

enum Gender {
  male
  female
  other
}

enum NoDueStatus {
  pending
  cleared
  due_found
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum InvoiceStatus {
  paid
  unpaid
  overdue
  cancelled
}

enum RequestWorkflowStatus {
  submitted
  with_advisor
  with_hod
  with_principal
  completed
  rejected
}

enum PaymentStatus {
  successful
  failed
  pending
}

enum NotificationStatus {
  read
  unread
}

// 3. Define Models
model User {
  id           Int        @id @default(autoincrement()) @map("user_id")
  username     String     @unique
  passwordHash String     @map("password_hash")
  email        String     @unique
  status       UserStatus @default(active)
  lastLogin    DateTime?  @map("last_login")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // --- Relations ---
  student               Student?
  approvals             NoDueApproval[]
  userRoles             UserRole[]
  hodDetails            HodDetails?
  advisorDetails        AdvisorDetails?
  principalDetails      PrincipalDetails?
  sentNotifications     Notification[]    @relation("SentNotifications")
  receivedNotifications Notification[]    @relation("ReceivedNotifications")
  auditLogs             AuditLog[]

  @@map("users")
}

model Role {
  id          Int     @id @default(autoincrement()) @map("role_id")
  name        String  @unique @map("role_name")
  description String?

  // --- Relations ---
  userRoles   UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int     @id @default(autoincrement()) @map("permission_id")
  name        String  @unique @map("permission_name") // e.g., 'create-request', 'approve-hod'
  description String?

  // --- Relations ---
  roles RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId Int @map("user_id")
  roleId Int @map("role_id")

  // --- Relations ---
  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  // --- Relations ---
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Student {
  id           Int      @id @default(autoincrement()) @map("student_id")
  userId       Int      @unique @map("user_id")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  dateOfBirth  DateTime @map("date_of_birth") @db.Date
  gender       Gender
  departmentId Int      @map("department_id")
  advisorId    Int?     @map("advisor_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // --- Relations ---
  user       User           @relation(fields: [userId], references: [id])
  department Department     @relation(fields: [departmentId], references: [id])
  requests   NoDueRequest[]
  invoices   Invoice[]
  feeDetails FeeDetails[]

  @@map("students")
}

model Department {
  id        Int      @id @default(autoincrement()) @map("department_id")
  name      String   @unique @map("department_name")
  hodId     Int?     @unique @map("hod_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // --- Relations ---
  students   Student[]
  noDues     NoDue[]
  hodDetails HodDetails?

  @@map("departments")
}

model HodDetails {
  id           Int @id @default(autoincrement()) @map("hod_id")
  userId       Int @unique @map("user_id")
  departmentId Int @unique @map("department_id")

  // --- Relations ---
  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@map("hod_details")
}

model AdvisorDetails {
  id     Int @id @default(autoincrement()) @map("advisor_id")
  userId Int @unique @map("user_id")

  // --- Relations ---
  user User @relation(fields: [userId], references: [id])

  @@map("advisor_details")
}

model PrincipalDetails {
  id     Int @id @default(autoincrement()) @map("principal_id")
  userId Int @unique @map("user_id")

  // --- Relations ---
  user User @relation(fields: [userId], references: [id])

  @@map("principal_details")
}

model NoDueRequest {
  id             Int                   @id @default(autoincrement()) @map("request_id")
  studentId      Int                   @map("student_id")
  reason         String
  requestDate    DateTime              @default(now()) @map("request_date")
  status         RequestStatus         @default(pending)
  workflowStatus RequestWorkflowStatus @default(submitted) @map("workflow_status")
  updatedAt      DateTime              @updatedAt @map("updated_at")

  // --- Relations ---
  student Student @relation(fields: [studentId], references: [id])
  noDues  NoDue[]

  @@map("no_due_requests")
}

model NoDue {
  id           Int         @id @default(autoincrement()) @map("no_due_id")
  requestId    Int         @map("request_id")
  departmentId Int         @map("department_id")
  status       NoDueStatus @default(pending)
  comments     String?
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // --- Relations ---
  request    NoDueRequest    @relation(fields: [requestId], references: [id])
  department Department      @relation(fields: [departmentId], references: [id])
  approvals  NoDueApproval[]

  @@map("no_dues")
}

model NoDueApproval {
  id           Int            @id @default(autoincrement()) @map("approval_id")
  noDueId      Int            @map("no_due_id")
  approverId   Int            @map("approver_id")
  approvalDate DateTime       @default(now()) @map("approval_date")
  status       ApprovalStatus @default(pending)
  comments     String?

  // --- Relations ---
  noDue    NoDue @relation(fields: [noDueId], references: [id])
  approver User  @relation(fields: [approverId], references: [id])

  @@map("no_due_approvals")
}

model FeeDetails {
  id        Int      @id @default(autoincrement()) @map("fee_id")
  studentId Int      @map("student_id")
  feeType   String   @map("fee_type")
  amount    Decimal
  dueDate   DateTime @map("due_date") @db.Date
  createdAt DateTime @default(now()) @map("created_at")

  // --- Relations ---
  student  Student   @relation(fields: [studentId], references: [id])
  invoices Invoice[]

  @@map("fee_details")
}

model Invoice {
  id        Int           @id @default(autoincrement()) @map("invoice_id")
  studentId Int           @map("student_id")
  feeId     Int           @map("fee_id")
  amount    Decimal
  issueDate DateTime      @default(now()) @map("issue_date") @db.Date
  dueDate   DateTime      @map("due_date") @db.Date
  status    InvoiceStatus @default(unpaid)
  createdAt DateTime      @default(now()) @map("created_at")

  // --- Relations ---
  student  Student    @relation(fields: [studentId], references: [id])
  fee      FeeDetails @relation(fields: [feeId], references: [id])
  payments Payment[]

  @@map("invoices")
}

model Payment {
  id            Int           @id @default(autoincrement()) @map("payment_id")
  invoiceId     Int           @map("invoice_id")
  amount        Decimal
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentMethod String        @map("payment_method")
  transactionId String        @unique @map("transaction_id")
  status        PaymentStatus @default(pending)

  // --- Relations ---
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Notification {
  id         Int                @id @default(autoincrement()) @map("notification_id")
  senderId   Int                @map("sender_id")
  receiverId Int                @map("receiver_id")
  message    String
  status     NotificationStatus @default(unread)
  createdAt  DateTime           @default(now()) @map("created_at")

  // --- Relations ---
  sender   User @relation("SentNotifications", fields: [senderId], references: [id])
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id        Int      @id @default(autoincrement()) @map("log_id")
  userId    Int      @map("user_id")
  action    String
  details   Json?
  timestamp DateTime @default(now())

  // --- Relations ---
  user User @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model Setting {
  id    Int    @id @default(autoincrement()) @map("setting_id")
  key   String @unique
  value String

  @@map("settings")
}
